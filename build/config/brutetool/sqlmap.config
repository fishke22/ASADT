# Script Enablers -->

brutetool_sqlmap_enable="1"

brutetool_sqlmap_bruteforce_enable="0"

# <-- Script Enablers

# Script Variables -->

sqlmap_verbosity_level="3"
## This can be set anywhere from 1-6

sqlmap_threads="5"
## This is the ammount of threads that SQLMap's python script can use to
## complete it's operable discovery and injection functions.
## Default amount is "5".

sqlmap_skip_to_sqlwiz="0"
## This is a switch, 1=true 0=false
## setting this to true will skip the use of ASADT's full compatability wizard
## and in return use SQLMAP's integrated wizard.

sqlmap_randomhttpuseragent="1"
## This is a switch, 1=true 0=false
## Setting this to true will enable the use of randomized http user agents
## when connecting to a target sql database, or http/s website.

sqlmap_anontor="0"
## This is a switch, 1=true 0=false
## Setting this to true will enable SQLMap's integrated Tor Anonymity
## Networking Service. Make sure this service is setup and configured
## properly prior to setting this to true for best results.

sqlmap_beeponfound="1"
## This is a switch, 1=true 0=false
## Setting this to true will allow the terminal to make an audible beep on
## discovery of any vulnrebilities, or during a "response needed" incident.

sqlmap_usebatch="0"
## This is a switch, 1=true 0=false
## Setting this to true will disable the need for any user inut during a 
## bruteforce attempt, and will use SQLMAP defaults during discovery"

sqlmap_connectioncheck="0"
## This is a switch, 1=true 0=false
## Setting this to true will assess your internet connection to the target machiene
## Prior to every connection attempt.

sqlmap_parseforms="0"
## This is a switch, 1=true 0=false
## Setting this to true will enable the parsing and testing on any form
## detected during the discovery phase of a bruteforce attempt.
## Please note, this setting can cause a major increase in resource usage
## and operation times, it should be disabled by default.

sqlmap_dumpformat="CSV"
## Available formats for dumped databases are
## CSV (default), HTML, or SQLITE

sqlmap_tempdir="/tmp/sqlmaptmp"
## This is the place that SQLMAP generates it's temprorary files prior to being dumped
## to the desired output location defined in the wizard


## ENUMERATION TYPES

# -a, --all           Retrieve everything
# -b, --banner        Retrieve DBMS banner
# --current-user      Retrieve DBMS current user
# --current-db        Retrieve DBMS current database
# --hostname          Retrieve DBMS server hostname
# --is-dba            Detect if the DBMS current user is DBA
# --users             Enumerate DBMS users
# --passwords         Enumerate DBMS users password hashes
# --privileges        Enumerate DBMS users privileges
# --roles             Enumerate DBMS users roles
# --dbs               Enumerate DBMS databases
# --tables            Enumerate DBMS database tables
# --columns           Enumerate DBMS database table columns
# --schema            Enumerate DBMS schema
# --count             Retrieve number of entries for table(s)
# --dump              Dump DBMS database table entries
# --dump-all          Dump all DBMS databases tables entries
# --search            Search column(s), table(s) and/or database name(s)
# --comments          Check for DBMS comments during enumeration
# --statements        Retrieve SQL statements being run on DBMS
# -D DB               DBMS database to enumerate
# -T TBL              DBMS database table(s) to enumerate
# -C COL              DBMS database table column(s) to enumerate
# -X EXCLUDE          DBMS database identifier(s) to not enumerate
# -U USER             DBMS user to enumerate
# --exclude-sysdbs    Exclude DBMS system databases when enumerating tables
# --pivot-column=P..  Pivot column name
# --where=DUMPWHERE   Use WHERE condition while table dumping
# --start=LIMITSTART  First dump table entry to retrieve
# --stop=LIMITSTOP    Last dump table entry to retrieve
# --first=FIRSTCHAR   First query output word character to retrieve
# --last=LASTCHAR     Last query output word character to retrieve
# --sql-query=SQLQ..  SQL statement to be executed
# --sql-shell         Prompt for an interactive SQL shell
# --sql-file=SQLFILE  Execute SQL statements from given file(s)

sqlmap_enum_args="--all"
## When adding seperate arguments, ensure the use spaces between arguments
## and keep the entire statement enclosed in quotation marks.


## SQLDB BRUTEFORCE TYPES
# These options can be used to run brute force checks

# --common-tables     Check existence of common tables
# --common-columns    Check existence of common columns
# --common-files      Check existence of common files

sqlmap_brute_args="--common-tables"
## Keep the entire statement enclosed in quotation marks.
## only ONE arguement can be used with this variable!
## Brute force checking will only be executed if the enabler
## "brutetool_sqlmap_bruteforce_enable" is set to "1"

# <-- Script Variables